#! /usr/bin/env python
# -*- coding: utf-8 -*-
# Authors: SDG DS unit
"""
Agent module for processing queries with memory and external tools.

This module defines the `Agent` class, which represents an agent that can process 
queries using a combination of tools, memory, and a chat model. The agent is designed 
to interact with a Qdrant database client and make use of predefined tools to generate 
responses to queries. The agent uses a memory buffer to track conversation history 
and can be customized with different tools and prompts for varied use cases.
"""

from typing import Any

from langchain.agents import AgentExecutor, create_react_agent
from langchain.chat_models import ChatOpenAI
from langchain.memory import ConversationBufferWindowMemory
from langchain.prompts import PromptTemplate
from src.services.agent.tools import (
    get_tools,
)  # Imports the function to get tools
from src.services.llm.prompts import get_character_prompt


class Agent:
    """
    A class that represents an agent using tools and memory to process queries.

    The Agent class is responsible for executing queries by using a chat model, memory,
    and external tools. It interacts with a Qdrant database client, uses a memory buffer
    to store conversation history, and can process queries with the help of predefined tools.

    Attributes:
        qdrant_client (QdrantClient): The client used to interact with the Qdrant database.
        memory (ConversationBufferWindowMemory): Memory buffer to store the conversation history.
        chat_model (ChatOpenAI): The chat model used for processing the queries.
        tools (List[Tool]): Tools available for the agent to use during query processing.
    """

    def __init__(self, qdrant_client: Any) -> None:
        """
        Initializes the Agent with the given Qdrant client.

        Args:
            qdrant_client (Any): The client used to interact with the Qdrant database.
        """
        self.qdrant_client = qdrant_client
        self.memory = ConversationBufferWindowMemory(
            memory_key="chat_history",
            k=6,
            return_messages=False,
            output_key="output",
        )

        # Define the chat model
        self.chat_model = ChatOpenAI(
            model_name="gpt-4o-mini",
            temperature=0.3,
            streaming=True,
            verbose=True,
            max_tokens=8192,
        )

    def run(self, query: str, informe_seleccionado: str, config: str) -> str:
        """
        Runs the agent with the provided query to get a response.

        Args:
            query (str): The query to be processed by the agent.
            informe_seleccionado (str): Selected repport from filter selection.

        Returns:
            str: The final output generated by the agent.
        """
        self.informe_seleccionado = informe_seleccionado
        # Create the updated prompt template
        self.prompt = PromptTemplate.from_template(
            template=get_character_prompt()
        )
        self.config = config
        # Get the tools through the get_tools function
        self.tools = get_tools(
            qdrant_client=self.qdrant_client,
            config=self.config,
            informe_seleccionado=self.informe_seleccionado,
            
        )
        # Create the agent with the prompt and the updated tools
        self.agent = create_react_agent(
            llm=self.chat_model, tools=self.tools, prompt=self.prompt
        )

        # Execute the agent directly with the query
        input_query = f"{query}"
        agent_executor = AgentExecutor(
            agent=self.agent,
            tools=self.tools,
            memory=self.memory,
            verbose=True,
            early_stopping_method="generate",
            handle_parsing_errors=True,
            max_iterations=3,
        )

        # Execute the agent to get the final result
        result = agent_executor.invoke(input={"input": input_query})["output"]

        # Return the final output of the agent
        return result
